import os
import re
import json

BASE = os.path.dirname(os.path.abspath(__file__))
PATH = os.path.join(BASE, "slip0044.jsonl")
PROTO = os.path.join(BASE, "enum.proto")


def read_slip0044(path=PATH):
    """Read the SLIP-0044 JSON file and return the data."""
    with open(path, "r") as f:
        for line in f:
            row = json.loads(line.strip())
            if "symbol" not in row or row["symbol"] == "" or row["name"] == "reserved":                         # noqa
                continue
            yield row


def valid_enum(name):
    return re.match(r"^[A-Za-z][A-Za-z0-9\_]+$", name)


def make_enum(name):
    """Convert a string to a valid enum name."""
    # Remove any parentheses and their contents
    name = re.sub(r"\(.*?\)", "", name)
    name = name.strip()  # Remove leading and trailing whitespace

    # Replace spaces with underscores and remove non-alphanumeric characters
    replacements = [
        (" ", "_"),  # Replace spaces with underscores
        ("-", "_"),  # Replace hyphens with underscores
        ("'", ""),   # Remove single quotes
        (".", ""),   # Remove periods
        ("+", ""),   # Remove plus signs
        ("$", ""),   # Remove dollar signs
        ("^", ""),   # Remove carets
        ("@", ""),   # Remove at signs
    ]

    name = name.upper()
    for replace in replacements:
        name = name.replace(*replace)

    if not valid_enum(name):
        return None
    return name


def generate_networks_js(path=PATH):
    for row in read_slip0044(path):
        print(f'  {{value: "{row['symbol']}", label: "{row['name']}"}},')


def generate_enum_proto(path=PATH):
    with open(PROTO, "w") as f:
        f.write("// Generated by generate.py. Do not edit.\n")
        f.write('syntax = "proto3";\n')
        f.write('package slip0044;\n')
        f.write('option go_package = "github.com/trisacrypto/trisa/pkg/slip0044";\n\n')                         # noqa
        f.writelines([
            '// Note: This is not a complete list of all SLIP-0044 registered coin types, but should\n',        # noqa
            '// contain all coins supported by TRISA and TRP. See\n',
            '// https://github.com/satoshilabs/slips/blob/master/slip-0044.md for the full list.\n',            # noqa
        ])
        f.write("enum CoinType {\n")
        f.write("  option allow_alias = true;\n")

        seen = set()

        for row in read_slip0044(path):
            if valid_enum(row['symbol']) and row['symbol'] not in seen:
                f.write(f"  {row['symbol']} = {row['coin_type']};\n")
                seen.add(row['symbol'])

            long_enum = make_enum(row['name'])
            if long_enum and long_enum != row['symbol'] and long_enum not in seen:                              # noqa
                # Add an alias for the long name
                f.write(f"  {long_enum} = {row['coin_type']};\n")
                seen.add(long_enum)

        f.write("}\n")


if __name__ == "__main__":
    generate_enum_proto()
