syntax = "proto3";

package trisa.gds.models.v1beta1;
option go_package = "github.com/trisacrypto/trisa/pkg/trisa/gds/models/v1beta1;models";

import "ivms101/ivms101.proto";
import "google/protobuf/any.proto";
import "trisa/gds/models/v1beta1/ca.proto";

// VASP represents the top-level directory entry for certificate public key exchange.
// The TRISA Directory service allows search and lookup of VASP entries and returns
// TRISA implementation details and certificate key material. VASPs must be registered
// with IVMS 101 identity data for the business entity as well as natural person
// entities for technical, legal, billing, and administrative contacts.
//
// A VASP entry is also the primary point of replication between directories that
// implement the directory replication service. It maintains the version information to
// detect changes with respect to a specific registered directory and faciliates
// anti-entropy gossip protocols.
message VASP {
    // A unique identifier generated by the directory service, should be a globally
    // unique identifier generated by the directory specified in registered_directory.
    string id = 1;

    // The url of directory that registered this VASP, e.g. vaspdirectory.net. The
    // id of the VASP must must be unique with respect to this field.
    string registered_directory = 2;

    // The legal entity IVMS 101 data for VASP KYC information exchange. This is the
    // IVMS 101 data that should be exchanged in the TRISA P2P protocol as the
    // Originator, Intermediate, or Beneficiary VASP fields. A complete and valid
    // identity record with country of registration is required.
    ivms101.LegalPerson entity = 3;

    // Technical, legal, billing, and administrative contacts for the VASP.
    Contacts contacts = 4;

    // Certificate information and public key material issued to the VASP to facilitate
    // mTLS connections between TRISA partners. If the VASP has not been verified then
    // the certificate will not be issued. This field is the most recently issued
    // certificate but may or may not be revoked.
    // In the white paper, this is referred to as the Identity EV-Cert.
    Certificate identity_certificate = 5;

    // Signing-key certificates and public key material used to sign transactions. The
    // primary use of signing-key certificates is to asymmetrically encrypt and sign
    // per-transaction symmetric encryption keys. A VASP can maintain any number of
    // signing certificates, which are idnetified by their signature or serial number.
    repeated Certificate signing_certificates = 6;

    // Domain name of the TRISA endpoint used as the common name for the certificate.
    // This field must be unique per VASP as it identifies the Certificate and is used
    // directly in lookups.
    string common_name = 7;

    // Travel Rule Implementation Endpoint - where other TRISA peers should connect.
    // This should be an addr:port combination, e.g. trisa.vaspbot.net:443
    string trisa_endpoint = 8;

    // Business Information
    string website = 9;
    BusinessCategory business_category = 10;
    repeated string vasp_categories = 11;
    string established_on = 12; // Should be a date in YYYY-MM-DD format

    // TRIXO Questionnaire
    TRIXOQuestionnaire trixo = 13;

    // Directory Service Metadata
    // Should not be populated by client code.
    VerificationState verification_status = 14;
    ServiceState service_status = 15;
    string verified_on = 16;  // Should be an RFC 3339 Timestamp
    string first_listed = 17; // Should be an RFC 3339 Timestamp
    string last_updated = 18; // Should be an RFC 3339 Timestamp

    // The legal entity signature that is used to verify uniqueness or detect changes.
    // It is used primarily by the directory service because the hash of a VASP object
    // is not specified in the whitepaper.
    // Should not be populated by client code.
    bytes signature = 19;

    // Version is used for anti-entropy based replication. It is used primarily by the
    // directory service and is not specified in the TRISA whitepaper.
    // Should not be populated by client code.
    Version version = 20;

    // Extra data that might be stored by the directory service related to the VASP.
    // Should not be populated by client code.
    google.protobuf.Any extra = 21;

    // Certificate delivery preferences which determine how the VASP will receive
    // issued certificates.
    string certificate_webhook = 22; // Webhook URL for delivering certificates
    bool no_email_delivery = 23; // If true, do not send certificates via email
}

// At least one of the following contact information is required for the VASP to be
// registered in a TRISA directory. Contact information should be kept private in the
// directory service and only used for email communication or verification.
message Contacts {
    Contact technical = 1;
    Contact administrative = 2;
    Contact legal = 3;
    Contact billing = 4;
}

message Contact {
    // Name is required to identify and address the contact
    string name = 1;

    // An email address is required for all contacts
    string email = 2;

    // Phone number is optional, but it is strongly suggested
    string phone = 3;

    // Optional KYC data if required for the directory service contact.
    ivms101.NaturalPerson person = 4;

    // Extra data that might be stored by the directory service related to the Contact.
    // Should not be populated by client code.
    google.protobuf.Any extra = 5;
}

message TRIXOQuestionnaire {
    // Should be the name of the country or an ISO-3166-1 code.
    string primary_national_jurisdiction = 1;

    // Name of primary financial regulator or supervisory authority.
    string primary_regulator = 2;

    // Is the VASP permitted to send and/or receive transfers of virtual assets in the
    // jurisdictions in which it operates?
    // One of yes, no, partially
    string financial_transfers_permitted = 3;

    // Other jurisdictions in which the entity operates.
    repeated Jurisdiction other_jurisdictions = 4;

    // Does the VASP have a programme that sets minimum AML, CFT, KYC/CDD and sanctions
    // standards per the requirements of the jurisdiction(s) regulatory regimes where
    // it is licensed/approved/registered?
    // Either yes or no
    string has_required_regulatory_program = 5;

    // Does the VASP conduct KYC/CDD before permitting its customers to send/receive
    // virtual asset transfers?
    bool conducts_customer_kyc = 6;

    // At what threshold does the VASP conduct KYC?
    float kyc_threshold = 7;
    string kyc_threshold_currency = 8;

    // Is the VASP required to comply with the application of the Travel Rule standards
    // in the jurisdiction(s) where it is licensed/approved/registered?
    bool must_comply_travel_rule = 9;

    // Applicable Travel Regulations the VASP must comply with.
    repeated string applicable_regulations = 10;

    // What is the minimum threshold for travel rule compliance?
    float compliance_threshold = 11;
    string compliance_threshold_currency = 12;

    // Is the VASP required by law to safeguard PII?
    bool must_safeguard_pii = 13;

    // Does the VASP secure and protect PII, including PII received from other VASPs
    // under the Travel Rule? (yes/no)
    bool safeguards_pii = 14;
}

message Jurisdiction {
    string country = 1;
    string regulator_name = 2;
    string license_number = 3;
}

// Implements a distributed version as a Lamport Scalar
message Version {
    uint64 pid = 1;      // Process ID - used to deconflict ties in the version number.
    uint64 version = 2;  // Montonically increasing version number.
}

enum BusinessCategory {
    UNKNOWN_ENTITY = 0;
    PRIVATE_ORGANIZATION = 1;
    GOVERNMENT_ENTITY = 2;
    BUSINESS_ENTITY = 3;
    NON_COMMERCIAL_ENTITY = 4;
    NON_VASP_ENTITY = 5;
}

enum VerificationState {
    NO_VERIFICATION = 0;
    SUBMITTED = 1;
    EMAIL_VERIFIED = 2;
    PENDING_REVIEW = 3;
    REVIEWED = 4;
    ISSUING_CERTIFICATE = 5;
    VERIFIED = 6;
    REJECTED = 7;
    APPEALED = 8;
    ERRORED = 9;
}

enum ServiceState {
    UNKNOWN = 0;
    HEALTHY = 1;
    UNHEALTHY = 2;
    DANGER = 3;
    OFFLINE = 4;
    MAINTENANCE = 5;
}