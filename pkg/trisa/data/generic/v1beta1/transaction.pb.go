// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: trisa/data/generic/v1beta1/transaction.proto

package generic

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Identifier int32

const (
	Identifier_SYMBOL   Identifier = 0 // the identifier is a coin/token symbol
	Identifier_DTI      Identifier = 1 // the Digital Token Identifier (DTI) for the asset
	Identifier_SLIP0044 Identifier = 2 // the SLIP0044 identifier for the asset
)

// Enum value maps for Identifier.
var (
	Identifier_name = map[int32]string{
		0: "SYMBOL",
		1: "DTI",
		2: "SLIP0044",
	}
	Identifier_value = map[string]int32{
		"SYMBOL":   0,
		"DTI":      1,
		"SLIP0044": 2,
	}
)

func (x Identifier) Enum() *Identifier {
	p := new(Identifier)
	*p = x
	return p
}

func (x Identifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identifier) Descriptor() protoreflect.EnumDescriptor {
	return file_trisa_data_generic_v1beta1_transaction_proto_enumTypes[0].Descriptor()
}

func (Identifier) Type() protoreflect.EnumType {
	return &file_trisa_data_generic_v1beta1_transaction_proto_enumTypes[0]
}

func (x Identifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identifier.Descriptor instead.
func (Identifier) EnumDescriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{0}
}

// Generic Transaction message for TRISA transaction payloads. The goal of this payload
// is to provide enough information to link Travel Rule Compliance information in the
// identity payload with a transaction on the blockchain or network. All fields are
// optional, this message serves as a convenience for parsing transaction payloads.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid        string  `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`                            // a transaction ID unique to the chain/network
	Originator  string  `protobuf:"bytes,2,opt,name=originator,proto3" json:"originator,omitempty"`                // crypto address of the originator
	Beneficiary string  `protobuf:"bytes,3,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`              // crypto address of the beneficiary
	Amount      float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`                      // amount of the transaction
	Network     string  `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`                      // the chain/network of the transaction
	Timestamp   string  `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                  // RFC 3339 timestamp of the transaction
	ExtraJson   string  `protobuf:"bytes,7,opt,name=extra_json,json=extraJson,proto3" json:"extra_json,omitempty"` // any extra data as a JSON formatted object
	AssetType   string  `protobuf:"bytes,8,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"` // the type of virtual asset for multi-asset chains
	Tag         string  `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`                              // optional memo/destination-tag required by some ledgers to identify transactions
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *Transaction) GetOriginator() string {
	if x != nil {
		return x.Originator
	}
	return ""
}

func (x *Transaction) GetBeneficiary() string {
	if x != nil {
		return x.Beneficiary
	}
	return ""
}

func (x *Transaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Transaction) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Transaction) GetExtraJson() string {
	if x != nil {
		return x.ExtraJson
	}
	return ""
}

func (x *Transaction) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Transaction) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier Identifier `protobuf:"varint,1,opt,name=identifier,proto3,enum=trisa.data.generic.v1beta1.Identifier" json:"identifier,omitempty"` // the identifier being used, e.g. "DTI" or "SLIP0044"
	Symbol     string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                     // the symbol of the asset used for the identifier
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetIdentifier() Identifier {
	if x != nil {
		return x.Identifier
	}
	return Identifier_SYMBOL
}

func (x *Asset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// A control flow message to support asynchronous TRISA transfers. Pending messages can
// be returned as an intermediate response during a compliance transfer if further
// processing is required before a response can be sent. The Pending message should
// provide information to the originator about when they can expect a response via the
// reply_not_before and reply_not_after timestamps. The Pending message should also
// provide collation information such as the envelope_id and original transaction so
// that the response message can be matched to the original request.
type Pending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvelopeId     string       `protobuf:"bytes,1,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"`               // the TRISA envelope ID that refers to the compliance communication
	ReceivedBy     string       `protobuf:"bytes,2,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`               // the name of the recipient or recipient VASP
	ReceivedAt     string       `protobuf:"bytes,3,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`               // the RFC3339 formatted timestamp when the request was received
	Message        string       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                       // an optional message to respond with to the counterparty
	ReplyNotAfter  string       `protobuf:"bytes,5,opt,name=reply_not_after,json=replyNotAfter,proto3" json:"reply_not_after,omitempty"`    // the RFC3339 formatted timestamp when the response will be returned by
	ReplyNotBefore string       `protobuf:"bytes,6,opt,name=reply_not_before,json=replyNotBefore,proto3" json:"reply_not_before,omitempty"` // the RFC339 formatted timestamp that the response will not be sent before
	ExtraJson      string       `protobuf:"bytes,7,opt,name=extra_json,json=extraJson,proto3" json:"extra_json,omitempty"`                  // any extra data as a JSON formatted object
	Transaction    *Transaction `protobuf:"bytes,15,opt,name=transaction,proto3" json:"transaction,omitempty"`                              // the original transaction for reference
}

func (x *Pending) Reset() {
	*x = Pending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pending) ProtoMessage() {}

func (x *Pending) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pending.ProtoReflect.Descriptor instead.
func (*Pending) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *Pending) GetEnvelopeId() string {
	if x != nil {
		return x.EnvelopeId
	}
	return ""
}

func (x *Pending) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *Pending) GetReceivedAt() string {
	if x != nil {
		return x.ReceivedAt
	}
	return ""
}

func (x *Pending) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Pending) GetReplyNotAfter() string {
	if x != nil {
		return x.ReplyNotAfter
	}
	return ""
}

func (x *Pending) GetReplyNotBefore() string {
	if x != nil {
		return x.ReplyNotBefore
	}
	return ""
}

func (x *Pending) GetExtraJson() string {
	if x != nil {
		return x.ExtraJson
	}
	return ""
}

func (x *Pending) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Sunrise is a control flow message to indicate that the message was sent over a side
// channel to the TRISA protocol such as via email or phone. The Sunrise message
// is only saved locally to indicate a record of an out-of-band communication and is not
// sent in a TRISA payload.
type Sunrise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvelopeId   string            `protobuf:"bytes,1,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"` // the TRISA envelope ID for reference
	Counterparty string            `protobuf:"bytes,2,opt,name=counterparty,proto3" json:"counterparty,omitempty"`               // the name of the counterparty or counterparty VASP the messages were sent to
	Messages     []*SunriseMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`                       // the list of recipients that the message was sent to
	ExtraJson    string            `protobuf:"bytes,14,opt,name=extra_json,json=extraJson,proto3" json:"extra_json,omitempty"`   // any extra data as a JSON formatted object
	Transaction  *Transaction      `protobuf:"bytes,15,opt,name=transaction,proto3" json:"transaction,omitempty"`                // the original transaction for reference
}

func (x *Sunrise) Reset() {
	*x = Sunrise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sunrise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sunrise) ProtoMessage() {}

func (x *Sunrise) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sunrise.ProtoReflect.Descriptor instead.
func (*Sunrise) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *Sunrise) GetEnvelopeId() string {
	if x != nil {
		return x.EnvelopeId
	}
	return ""
}

func (x *Sunrise) GetCounterparty() string {
	if x != nil {
		return x.Counterparty
	}
	return ""
}

func (x *Sunrise) GetMessages() []*SunriseMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Sunrise) GetExtraJson() string {
	if x != nil {
		return x.ExtraJson
	}
	return ""
}

func (x *Sunrise) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// SunriseMessages may be sent to multiple contacts via different channels (e.g. via
// an email or phone call to the compliance officer and general contact).
type SunriseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient      string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`                                   // the name of the recipient or recipient VASP
	Email          string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`                                           // the email address of the recipient
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                           // the phone number of the recipient
	Channel        string `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`                                       // the name of the method or channel the message was sent over (e.g. email or phone)
	SentAt         string `protobuf:"bytes,5,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`                           // the RFC3339 formatted timestamp when the message was sent
	ReplyNotBefore string `protobuf:"bytes,6,opt,name=reply_not_before,json=replyNotBefore,proto3" json:"reply_not_before,omitempty"` // the RFC339 formatted timestamp that the response is expected before message expiration
}

func (x *SunriseMessage) Reset() {
	*x = SunriseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SunriseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SunriseMessage) ProtoMessage() {}

func (x *SunriseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SunriseMessage.ProtoReflect.Descriptor instead.
func (*SunriseMessage) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *SunriseMessage) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *SunriseMessage) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SunriseMessage) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SunriseMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SunriseMessage) GetSentAt() string {
	if x != nil {
		return x.SentAt
	}
	return ""
}

func (x *SunriseMessage) GetReplyNotBefore() string {
	if x != nil {
		return x.ReplyNotBefore
	}
	return ""
}

// When a TRP message is received by a TRISA node the "pending reply" is implicit in
// the response. Therefore instead of storing a Pending message, the TRISA node will
// store a TRP transaction with additional metadata about the TRP/OpenVASP exchage.
type TRP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The headers of the message
	EnvelopeId string   `protobuf:"bytes,1,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"` // in TRP parlance, the "request identifier" (extracted from headers)
	Headers    *TRPInfo `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`                         // the TRP API metadata for the transaction
	// The TRP Message sent in the body of the request or reply
	//
	// Types that are assignable to Message:
	//
	//	*TRP_Inquiry
	//	*TRP_Approved
	//	*TRP_Rejected
	//	*TRP_Confirmed
	//	*TRP_Canceled
	Message isTRP_Message `protobuf_oneof:"message"`
	// Extensions and parsed TRISA information
	Extensions  string       `protobuf:"bytes,14,opt,name=extensions,proto3" json:"extensions,omitempty"`   // any extensions data as a JSON formatted string
	Transaction *Transaction `protobuf:"bytes,15,opt,name=transaction,proto3" json:"transaction,omitempty"` // the TRISA reference transaction
}

func (x *TRP) Reset() {
	*x = TRP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRP) ProtoMessage() {}

func (x *TRP) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRP.ProtoReflect.Descriptor instead.
func (*TRP) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *TRP) GetEnvelopeId() string {
	if x != nil {
		return x.EnvelopeId
	}
	return ""
}

func (x *TRP) GetHeaders() *TRPInfo {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *TRP) GetMessage() isTRP_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *TRP) GetInquiry() *TRPInquiry {
	if x, ok := x.GetMessage().(*TRP_Inquiry); ok {
		return x.Inquiry
	}
	return nil
}

func (x *TRP) GetApproved() *TRPApproved {
	if x, ok := x.GetMessage().(*TRP_Approved); ok {
		return x.Approved
	}
	return nil
}

func (x *TRP) GetRejected() *TRPRejected {
	if x, ok := x.GetMessage().(*TRP_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *TRP) GetConfirmed() *TRPConfirmed {
	if x, ok := x.GetMessage().(*TRP_Confirmed); ok {
		return x.Confirmed
	}
	return nil
}

func (x *TRP) GetCanceled() *TRPCanceled {
	if x, ok := x.GetMessage().(*TRP_Canceled); ok {
		return x.Canceled
	}
	return nil
}

func (x *TRP) GetExtensions() string {
	if x != nil {
		return x.Extensions
	}
	return ""
}

func (x *TRP) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type isTRP_Message interface {
	isTRP_Message()
}

type TRP_Inquiry struct {
	Inquiry *TRPInquiry `protobuf:"bytes,3,opt,name=inquiry,proto3,oneof"`
}

type TRP_Approved struct {
	Approved *TRPApproved `protobuf:"bytes,4,opt,name=approved,proto3,oneof"`
}

type TRP_Rejected struct {
	Rejected *TRPRejected `protobuf:"bytes,5,opt,name=rejected,proto3,oneof"`
}

type TRP_Confirmed struct {
	Confirmed *TRPConfirmed `protobuf:"bytes,6,opt,name=confirmed,proto3,oneof"`
}

type TRP_Canceled struct {
	Canceled *TRPCanceled `protobuf:"bytes,7,opt,name=canceled,proto3,oneof"`
}

func (*TRP_Inquiry) isTRP_Message() {}

func (*TRP_Approved) isTRP_Message() {}

func (*TRP_Rejected) isTRP_Message() {}

func (*TRP_Confirmed) isTRP_Message() {}

func (*TRP_Canceled) isTRP_Message() {}

// TRPInfo stores the API metadata for the TRP transaction.
type TRPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                              // the TRP API version used in the message
	RequestIdentifier string   `protobuf:"bytes,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"` // the request identifier (envelope ID)
	Extensions        []string `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`                                        // The names of any extensions uses in the request
}

func (x *TRPInfo) Reset() {
	*x = TRPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRPInfo) ProtoMessage() {}

func (x *TRPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRPInfo.ProtoReflect.Descriptor instead.
func (*TRPInfo) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *TRPInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TRPInfo) GetRequestIdentifier() string {
	if x != nil {
		return x.RequestIdentifier
	}
	return ""
}

func (x *TRPInfo) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// A TRPInquiry contains the asset, amount, and callback information.
type TRPInquiry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    map[string]string `protobuf:"bytes,1,rep,name=asset,proto3" json:"asset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the asset identifier(s) for the transaction
	Amount   float64           `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                                                     // the amount of the transaction
	Callback string            `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`                                                                                   // the callback URL to respond to
}

func (x *TRPInquiry) Reset() {
	*x = TRPInquiry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRPInquiry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRPInquiry) ProtoMessage() {}

func (x *TRPInquiry) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRPInquiry.ProtoReflect.Descriptor instead.
func (*TRPInquiry) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *TRPInquiry) GetAsset() map[string]string {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *TRPInquiry) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TRPInquiry) GetCallback() string {
	if x != nil {
		return x.Callback
	}
	return ""
}

// TRPResolution contains the response to an approved/rejected TRP inquiry.
type TRPApproved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`   // some payment address
	Callback string `protobuf:"bytes,2,opt,name=callback,proto3" json:"callback,omitempty"` // callback to send transaction ID to.
}

func (x *TRPApproved) Reset() {
	*x = TRPApproved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRPApproved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRPApproved) ProtoMessage() {}

func (x *TRPApproved) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRPApproved.ProtoReflect.Descriptor instead.
func (*TRPApproved) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *TRPApproved) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TRPApproved) GetCallback() string {
	if x != nil {
		return x.Callback
	}
	return ""
}

type TRPRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rejected string `protobuf:"bytes,1,opt,name=rejected,proto3" json:"rejected,omitempty"` // the human readable reason for rejection or null
}

func (x *TRPRejected) Reset() {
	*x = TRPRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRPRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRPRejected) ProtoMessage() {}

func (x *TRPRejected) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRPRejected.ProtoReflect.Descriptor instead.
func (*TRPRejected) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *TRPRejected) GetRejected() string {
	if x != nil {
		return x.Rejected
	}
	return ""
}

type TRPConfirmed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"` // the transaction ID of the confirmed transaction on the chain
}

func (x *TRPConfirmed) Reset() {
	*x = TRPConfirmed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRPConfirmed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRPConfirmed) ProtoMessage() {}

func (x *TRPConfirmed) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRPConfirmed.ProtoReflect.Descriptor instead.
func (*TRPConfirmed) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *TRPConfirmed) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type TRPCanceled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Canceled string `protobuf:"bytes,1,opt,name=canceled,proto3" json:"canceled,omitempty"` // the human readable reason for cancellation or null
}

func (x *TRPCanceled) Reset() {
	*x = TRPCanceled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRPCanceled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRPCanceled) ProtoMessage() {}

func (x *TRPCanceled) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRPCanceled.ProtoReflect.Descriptor instead.
func (*TRPCanceled) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *TRPCanceled) GetCanceled() string {
	if x != nil {
		return x.Canceled
	}
	return ""
}

// DEPRECATED: the ConfirmationReceipt message was deemed to cause confusion as it could
// signal that the confirmation payload was received and the transfer is concluded. Use
// the Pending message instead to signal that this is a control flow message.
type ConfirmationReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvelopeId       string `protobuf:"bytes,1,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"`                    // the TRISA envelope ID for reference
	ReceivedBy       string `protobuf:"bytes,2,opt,name=received_by,json=receivedBy,proto3" json:"received_by,omitempty"`                    // name of the recipient or recipient VASP
	ReceivedAt       string `protobuf:"bytes,3,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`                    // RFC 3339 timestamp of the receipt of request
	Message          string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                            // A generic message to respond with
	ResponseRequired bool   `protobuf:"varint,5,opt,name=response_required,json=responseRequired,proto3" json:"response_required,omitempty"` // If the message requires an additional transfer message
}

func (x *ConfirmationReceipt) Reset() {
	*x = ConfirmationReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmationReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmationReceipt) ProtoMessage() {}

func (x *ConfirmationReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmationReceipt.ProtoReflect.Descriptor instead.
func (*ConfirmationReceipt) Descriptor() ([]byte, []int) {
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *ConfirmationReceipt) GetEnvelopeId() string {
	if x != nil {
		return x.EnvelopeId
	}
	return ""
}

func (x *ConfirmationReceipt) GetReceivedBy() string {
	if x != nil {
		return x.ReceivedBy
	}
	return ""
}

func (x *ConfirmationReceipt) GetReceivedAt() string {
	if x != nil {
		return x.ReceivedAt
	}
	return ""
}

func (x *ConfirmationReceipt) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfirmationReceipt) GetResponseRequired() bool {
	if x != nil {
		return x.ResponseRequired
	}
	return false
}

var File_trisa_data_generic_v1beta1_transaction_proto protoreflect.FileDescriptor

var file_trisa_data_generic_v1beta1_transaction_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0x83, 0x02, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x22, 0x67, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xc2, 0x02, 0x0a, 0x07, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80,
	0x02, 0x0a, 0x07, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72,
	0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x03,
	0x54, 0x52, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x52, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x52, 0x50, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x69, 0x73,
	0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x52, 0x50, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x52,
	0x50, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x52, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54,
	0x52, 0x50, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72,
	0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x07,
	0x54, 0x52, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x54, 0x52, 0x50, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12,
	0x47, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x52, 0x50, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x38, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0b, 0x54, 0x52, 0x50, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x29, 0x0a, 0x0b, 0x54,
	0x52, 0x50, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x52, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x54, 0x52,
	0x50, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2a, 0x2f, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x54, 0x49, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c,
	0x49, 0x50, 0x30, 0x30, 0x34, 0x34, 0x10, 0x02, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x69, 0x73, 0x61, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x72, 0x69,
	0x73, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trisa_data_generic_v1beta1_transaction_proto_rawDescOnce sync.Once
	file_trisa_data_generic_v1beta1_transaction_proto_rawDescData = file_trisa_data_generic_v1beta1_transaction_proto_rawDesc
)

func file_trisa_data_generic_v1beta1_transaction_proto_rawDescGZIP() []byte {
	file_trisa_data_generic_v1beta1_transaction_proto_rawDescOnce.Do(func() {
		file_trisa_data_generic_v1beta1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_trisa_data_generic_v1beta1_transaction_proto_rawDescData)
	})
	return file_trisa_data_generic_v1beta1_transaction_proto_rawDescData
}

var file_trisa_data_generic_v1beta1_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_trisa_data_generic_v1beta1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_trisa_data_generic_v1beta1_transaction_proto_goTypes = []any{
	(Identifier)(0),             // 0: trisa.data.generic.v1beta1.Identifier
	(*Transaction)(nil),         // 1: trisa.data.generic.v1beta1.Transaction
	(*Asset)(nil),               // 2: trisa.data.generic.v1beta1.Asset
	(*Pending)(nil),             // 3: trisa.data.generic.v1beta1.Pending
	(*Sunrise)(nil),             // 4: trisa.data.generic.v1beta1.Sunrise
	(*SunriseMessage)(nil),      // 5: trisa.data.generic.v1beta1.SunriseMessage
	(*TRP)(nil),                 // 6: trisa.data.generic.v1beta1.TRP
	(*TRPInfo)(nil),             // 7: trisa.data.generic.v1beta1.TRPInfo
	(*TRPInquiry)(nil),          // 8: trisa.data.generic.v1beta1.TRPInquiry
	(*TRPApproved)(nil),         // 9: trisa.data.generic.v1beta1.TRPApproved
	(*TRPRejected)(nil),         // 10: trisa.data.generic.v1beta1.TRPRejected
	(*TRPConfirmed)(nil),        // 11: trisa.data.generic.v1beta1.TRPConfirmed
	(*TRPCanceled)(nil),         // 12: trisa.data.generic.v1beta1.TRPCanceled
	(*ConfirmationReceipt)(nil), // 13: trisa.data.generic.v1beta1.ConfirmationReceipt
	nil,                         // 14: trisa.data.generic.v1beta1.TRPInquiry.AssetEntry
}
var file_trisa_data_generic_v1beta1_transaction_proto_depIdxs = []int32{
	0,  // 0: trisa.data.generic.v1beta1.Asset.identifier:type_name -> trisa.data.generic.v1beta1.Identifier
	1,  // 1: trisa.data.generic.v1beta1.Pending.transaction:type_name -> trisa.data.generic.v1beta1.Transaction
	5,  // 2: trisa.data.generic.v1beta1.Sunrise.messages:type_name -> trisa.data.generic.v1beta1.SunriseMessage
	1,  // 3: trisa.data.generic.v1beta1.Sunrise.transaction:type_name -> trisa.data.generic.v1beta1.Transaction
	7,  // 4: trisa.data.generic.v1beta1.TRP.headers:type_name -> trisa.data.generic.v1beta1.TRPInfo
	8,  // 5: trisa.data.generic.v1beta1.TRP.inquiry:type_name -> trisa.data.generic.v1beta1.TRPInquiry
	9,  // 6: trisa.data.generic.v1beta1.TRP.approved:type_name -> trisa.data.generic.v1beta1.TRPApproved
	10, // 7: trisa.data.generic.v1beta1.TRP.rejected:type_name -> trisa.data.generic.v1beta1.TRPRejected
	11, // 8: trisa.data.generic.v1beta1.TRP.confirmed:type_name -> trisa.data.generic.v1beta1.TRPConfirmed
	12, // 9: trisa.data.generic.v1beta1.TRP.canceled:type_name -> trisa.data.generic.v1beta1.TRPCanceled
	1,  // 10: trisa.data.generic.v1beta1.TRP.transaction:type_name -> trisa.data.generic.v1beta1.Transaction
	14, // 11: trisa.data.generic.v1beta1.TRPInquiry.asset:type_name -> trisa.data.generic.v1beta1.TRPInquiry.AssetEntry
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_trisa_data_generic_v1beta1_transaction_proto_init() }
func file_trisa_data_generic_v1beta1_transaction_proto_init() {
	if File_trisa_data_generic_v1beta1_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Pending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Sunrise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SunriseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TRP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TRPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TRPInquiry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TRPApproved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TRPRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TRPConfirmed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TRPCanceled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ConfirmationReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trisa_data_generic_v1beta1_transaction_proto_msgTypes[5].OneofWrappers = []any{
		(*TRP_Inquiry)(nil),
		(*TRP_Approved)(nil),
		(*TRP_Rejected)(nil),
		(*TRP_Confirmed)(nil),
		(*TRP_Canceled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trisa_data_generic_v1beta1_transaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trisa_data_generic_v1beta1_transaction_proto_goTypes,
		DependencyIndexes: file_trisa_data_generic_v1beta1_transaction_proto_depIdxs,
		EnumInfos:         file_trisa_data_generic_v1beta1_transaction_proto_enumTypes,
		MessageInfos:      file_trisa_data_generic_v1beta1_transaction_proto_msgTypes,
	}.Build()
	File_trisa_data_generic_v1beta1_transaction_proto = out.File
	file_trisa_data_generic_v1beta1_transaction_proto_rawDesc = nil
	file_trisa_data_generic_v1beta1_transaction_proto_goTypes = nil
	file_trisa_data_generic_v1beta1_transaction_proto_depIdxs = nil
}
