// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: trisa/gds/models/v1beta1/models.proto

package models

import (
	ivms101 "github.com/trisacrypto/trisa/pkg/ivms101"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BusinessCategory int32

const (
	BusinessCategory_UNKNOWN_ENTITY        BusinessCategory = 0
	BusinessCategory_PRIVATE_ORGANIZATION  BusinessCategory = 1
	BusinessCategory_GOVERNMENT_ENTITY     BusinessCategory = 2
	BusinessCategory_BUSINESS_ENTITY       BusinessCategory = 3
	BusinessCategory_NON_COMMERCIAL_ENTITY BusinessCategory = 4
)

// Enum value maps for BusinessCategory.
var (
	BusinessCategory_name = map[int32]string{
		0: "UNKNOWN_ENTITY",
		1: "PRIVATE_ORGANIZATION",
		2: "GOVERNMENT_ENTITY",
		3: "BUSINESS_ENTITY",
		4: "NON_COMMERCIAL_ENTITY",
	}
	BusinessCategory_value = map[string]int32{
		"UNKNOWN_ENTITY":        0,
		"PRIVATE_ORGANIZATION":  1,
		"GOVERNMENT_ENTITY":     2,
		"BUSINESS_ENTITY":       3,
		"NON_COMMERCIAL_ENTITY": 4,
	}
)

func (x BusinessCategory) Enum() *BusinessCategory {
	p := new(BusinessCategory)
	*p = x
	return p
}

func (x BusinessCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_trisa_gds_models_v1beta1_models_proto_enumTypes[0].Descriptor()
}

func (BusinessCategory) Type() protoreflect.EnumType {
	return &file_trisa_gds_models_v1beta1_models_proto_enumTypes[0]
}

func (x BusinessCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessCategory.Descriptor instead.
func (BusinessCategory) EnumDescriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{0}
}

type VerificationState int32

const (
	VerificationState_NO_VERIFICATION     VerificationState = 0
	VerificationState_SUBMITTED           VerificationState = 1
	VerificationState_EMAIL_VERIFIED      VerificationState = 2
	VerificationState_PENDING_REVIEW      VerificationState = 3
	VerificationState_REVIEWED            VerificationState = 4
	VerificationState_ISSUING_CERTIFICATE VerificationState = 5
	VerificationState_VERIFIED            VerificationState = 6
	VerificationState_REJECTED            VerificationState = 7
	VerificationState_APPEALED            VerificationState = 8
	VerificationState_ERRORED             VerificationState = 9
)

// Enum value maps for VerificationState.
var (
	VerificationState_name = map[int32]string{
		0: "NO_VERIFICATION",
		1: "SUBMITTED",
		2: "EMAIL_VERIFIED",
		3: "PENDING_REVIEW",
		4: "REVIEWED",
		5: "ISSUING_CERTIFICATE",
		6: "VERIFIED",
		7: "REJECTED",
		8: "APPEALED",
		9: "ERRORED",
	}
	VerificationState_value = map[string]int32{
		"NO_VERIFICATION":     0,
		"SUBMITTED":           1,
		"EMAIL_VERIFIED":      2,
		"PENDING_REVIEW":      3,
		"REVIEWED":            4,
		"ISSUING_CERTIFICATE": 5,
		"VERIFIED":            6,
		"REJECTED":            7,
		"APPEALED":            8,
		"ERRORED":             9,
	}
)

func (x VerificationState) Enum() *VerificationState {
	p := new(VerificationState)
	*p = x
	return p
}

func (x VerificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_trisa_gds_models_v1beta1_models_proto_enumTypes[1].Descriptor()
}

func (VerificationState) Type() protoreflect.EnumType {
	return &file_trisa_gds_models_v1beta1_models_proto_enumTypes[1]
}

func (x VerificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationState.Descriptor instead.
func (VerificationState) EnumDescriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{1}
}

type ServiceState int32

const (
	ServiceState_UNKNOWN     ServiceState = 0
	ServiceState_HEALTHY     ServiceState = 1
	ServiceState_UNHEALTHY   ServiceState = 2
	ServiceState_DANGER      ServiceState = 3
	ServiceState_OFFLINE     ServiceState = 4
	ServiceState_MAINTENANCE ServiceState = 5
)

// Enum value maps for ServiceState.
var (
	ServiceState_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "DANGER",
		4: "OFFLINE",
		5: "MAINTENANCE",
	}
	ServiceState_value = map[string]int32{
		"UNKNOWN":     0,
		"HEALTHY":     1,
		"UNHEALTHY":   2,
		"DANGER":      3,
		"OFFLINE":     4,
		"MAINTENANCE": 5,
	}
)

func (x ServiceState) Enum() *ServiceState {
	p := new(ServiceState)
	*p = x
	return p
}

func (x ServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_trisa_gds_models_v1beta1_models_proto_enumTypes[2].Descriptor()
}

func (ServiceState) Type() protoreflect.EnumType {
	return &file_trisa_gds_models_v1beta1_models_proto_enumTypes[2]
}

func (x ServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceState.Descriptor instead.
func (ServiceState) EnumDescriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{2}
}

// VASP represents the top-level directory entry for certificate public key exchange.
// The TRISA Directory service allows search and lookup of VASP entries and returns
// TRISA implementation details and certificate key material. VASPs must be registered
// with IVMS 101 identity data for the business entity as well as natural person
// entities for technical, legal, billing, and administrative contacts.
//
// A VASP entry is also the primary point of replication between directories that
// implement the directory replication service. It maintains the version information to
// detect changes with respect to a specific registered directory and faciliates
// anti-entropy gossip protocols.
type VASP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier generated by the directory service, should be a globally
	// unique identifier generated by the directory specified in registered_directory.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The url of directory that registered this VASP, e.g. vaspdirectory.net. The
	// id of the VASP must must be unique with respect to this field.
	RegisteredDirectory string `protobuf:"bytes,2,opt,name=registered_directory,json=registeredDirectory,proto3" json:"registered_directory,omitempty"`
	// The legal entity IVMS 101 data for VASP KYC information exchange. This is the
	// IVMS 101 data that should be exchanged in the TRISA P2P protocol as the
	// Originator, Intermediate, or Beneficiary VASP fields. A complete and valid
	// identity record with country of registration is required.
	Entity *ivms101.LegalPerson `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	// Technical, legal, billing, and administrative contacts for the VASP.
	Contacts *Contacts `protobuf:"bytes,4,opt,name=contacts,proto3" json:"contacts,omitempty"`
	// Certificate information and public key material issued to the VASP to facilitate
	// mTLS connections between TRISA partners. If the VASP has not been verified then
	// the certificate will not be issued. This field is the most recently issued
	// certificate but may or may not be revoked.
	// In the white paper, this is referred to as the Identity EV-Cert.
	IdentityCertificate *Certificate `protobuf:"bytes,5,opt,name=identity_certificate,json=identityCertificate,proto3" json:"identity_certificate,omitempty"`
	// Signing-key certificates and public key material used to sign transactions. The
	// primary use of signing-key certificates is to asymmetrically encrypt and sign
	// per-transaction symmetric encryption keys. A VASP can maintain any number of
	// signing certificates, which are idnetified by their signature or serial number.
	SigningCertificates []*Certificate `protobuf:"bytes,6,rep,name=signing_certificates,json=signingCertificates,proto3" json:"signing_certificates,omitempty"`
	// Domain name of the TRISA endpoint used as the common name for the certificate.
	// This field must be unique per VASP as it identifies the Certificate and is used
	// directly in lookups.
	CommonName string `protobuf:"bytes,7,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Travel Rule Implementation Endpoint - where other TRISA peers should connect.
	// This should be an addr:port combination, e.g. trisa.vaspbot.net:443
	TrisaEndpoint string `protobuf:"bytes,8,opt,name=trisa_endpoint,json=trisaEndpoint,proto3" json:"trisa_endpoint,omitempty"`
	// Business Information
	Website          string           `protobuf:"bytes,9,opt,name=website,proto3" json:"website,omitempty"`
	BusinessCategory BusinessCategory `protobuf:"varint,10,opt,name=business_category,json=businessCategory,proto3,enum=trisa.gds.models.v1beta1.BusinessCategory" json:"business_category,omitempty"`
	VaspCategories   []string         `protobuf:"bytes,11,rep,name=vasp_categories,json=vaspCategories,proto3" json:"vasp_categories,omitempty"`
	EstablishedOn    string           `protobuf:"bytes,12,opt,name=established_on,json=establishedOn,proto3" json:"established_on,omitempty"` // Should be a date in YYYY-MM-DD format
	// TRIXO Questionnaire
	Trixo *TRIXOQuestionnaire `protobuf:"bytes,13,opt,name=trixo,proto3" json:"trixo,omitempty"`
	// Directory Service Metadata
	// Should not be populated by client code.
	VerificationStatus VerificationState `protobuf:"varint,14,opt,name=verification_status,json=verificationStatus,proto3,enum=trisa.gds.models.v1beta1.VerificationState" json:"verification_status,omitempty"`
	ServiceStatus      ServiceState      `protobuf:"varint,15,opt,name=service_status,json=serviceStatus,proto3,enum=trisa.gds.models.v1beta1.ServiceState" json:"service_status,omitempty"`
	VerifiedOn         string            `protobuf:"bytes,16,opt,name=verified_on,json=verifiedOn,proto3" json:"verified_on,omitempty"`    // Should be an RFC 3339 Timestamp
	FirstListed        string            `protobuf:"bytes,17,opt,name=first_listed,json=firstListed,proto3" json:"first_listed,omitempty"` // Should be an RFC 3339 Timestamp
	LastUpdated        string            `protobuf:"bytes,18,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"` // Should be an RFC 3339 Timestamp
	// The legal entity signature that is used to verify uniqueness or detect changes.
	// It is used primarily by the directory service because the hash of a VASP object
	// is not specified in the whitepaper.
	// Should not be populated by client code.
	Signature []byte `protobuf:"bytes,19,opt,name=signature,proto3" json:"signature,omitempty"`
	// Version is used for anti-entropy based replication. It is used primarily by the
	// directory service and is not specified in the TRISA whitepaper.
	// Should not be populated by client code.
	Version *Version `protobuf:"bytes,20,opt,name=version,proto3" json:"version,omitempty"`
	// Extra data that might be stored by the directory service related to the VASP.
	// Should not be populated by client code.
	Extra *anypb.Any `protobuf:"bytes,21,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *VASP) Reset() {
	*x = VASP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VASP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VASP) ProtoMessage() {}

func (x *VASP) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VASP.ProtoReflect.Descriptor instead.
func (*VASP) Descriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{0}
}

func (x *VASP) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VASP) GetRegisteredDirectory() string {
	if x != nil {
		return x.RegisteredDirectory
	}
	return ""
}

func (x *VASP) GetEntity() *ivms101.LegalPerson {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *VASP) GetContacts() *Contacts {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *VASP) GetIdentityCertificate() *Certificate {
	if x != nil {
		return x.IdentityCertificate
	}
	return nil
}

func (x *VASP) GetSigningCertificates() []*Certificate {
	if x != nil {
		return x.SigningCertificates
	}
	return nil
}

func (x *VASP) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *VASP) GetTrisaEndpoint() string {
	if x != nil {
		return x.TrisaEndpoint
	}
	return ""
}

func (x *VASP) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *VASP) GetBusinessCategory() BusinessCategory {
	if x != nil {
		return x.BusinessCategory
	}
	return BusinessCategory_UNKNOWN_ENTITY
}

func (x *VASP) GetVaspCategories() []string {
	if x != nil {
		return x.VaspCategories
	}
	return nil
}

func (x *VASP) GetEstablishedOn() string {
	if x != nil {
		return x.EstablishedOn
	}
	return ""
}

func (x *VASP) GetTrixo() *TRIXOQuestionnaire {
	if x != nil {
		return x.Trixo
	}
	return nil
}

func (x *VASP) GetVerificationStatus() VerificationState {
	if x != nil {
		return x.VerificationStatus
	}
	return VerificationState_NO_VERIFICATION
}

func (x *VASP) GetServiceStatus() ServiceState {
	if x != nil {
		return x.ServiceStatus
	}
	return ServiceState_UNKNOWN
}

func (x *VASP) GetVerifiedOn() string {
	if x != nil {
		return x.VerifiedOn
	}
	return ""
}

func (x *VASP) GetFirstListed() string {
	if x != nil {
		return x.FirstListed
	}
	return ""
}

func (x *VASP) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *VASP) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VASP) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *VASP) GetExtra() *anypb.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

// At least one of the following contact information is required for the VASP to be
// registered in a TRISA directory. Contact information should be kept private in the
// directory service and only used for email communication or verification.
type Contacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Technical      *Contact `protobuf:"bytes,1,opt,name=technical,proto3" json:"technical,omitempty"`
	Administrative *Contact `protobuf:"bytes,2,opt,name=administrative,proto3" json:"administrative,omitempty"`
	Legal          *Contact `protobuf:"bytes,3,opt,name=legal,proto3" json:"legal,omitempty"`
	Billing        *Contact `protobuf:"bytes,4,opt,name=billing,proto3" json:"billing,omitempty"`
}

func (x *Contacts) Reset() {
	*x = Contacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contacts) ProtoMessage() {}

func (x *Contacts) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contacts.ProtoReflect.Descriptor instead.
func (*Contacts) Descriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{1}
}

func (x *Contacts) GetTechnical() *Contact {
	if x != nil {
		return x.Technical
	}
	return nil
}

func (x *Contacts) GetAdministrative() *Contact {
	if x != nil {
		return x.Administrative
	}
	return nil
}

func (x *Contacts) GetLegal() *Contact {
	if x != nil {
		return x.Legal
	}
	return nil
}

func (x *Contacts) GetBilling() *Contact {
	if x != nil {
		return x.Billing
	}
	return nil
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is required to identify and address the contact
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An email address is required for all contacts
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Phone number is optional, but it is strongly suggested
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// Optional KYC data if required for the directory service contact.
	Person *ivms101.NaturalPerson `protobuf:"bytes,4,opt,name=person,proto3" json:"person,omitempty"`
	// Extra data that might be stored by the directory service related to the Contact.
	// Should not be populated by client code.
	Extra *anypb.Any `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{2}
}

func (x *Contact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Contact) GetPerson() *ivms101.NaturalPerson {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Contact) GetExtra() *anypb.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TRIXOQuestionnaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should be the name of the country or an ISO-3166-1 code.
	PrimaryNationalJurisdiction string `protobuf:"bytes,1,opt,name=primary_national_jurisdiction,json=primaryNationalJurisdiction,proto3" json:"primary_national_jurisdiction,omitempty"`
	// Name of primary financial regulator or supervisory authority.
	PrimaryRegulator string `protobuf:"bytes,2,opt,name=primary_regulator,json=primaryRegulator,proto3" json:"primary_regulator,omitempty"`
	// Is the VASP permitted to send and/or receive transfers of virtual assets in the
	// jurisdictions in which it operates?
	// One of yes, no, partially
	FinancialTransfersPermitted string `protobuf:"bytes,3,opt,name=financial_transfers_permitted,json=financialTransfersPermitted,proto3" json:"financial_transfers_permitted,omitempty"`
	// Other jurisdictions in which the entity operates.
	OtherJurisdictions []*Jurisdiction `protobuf:"bytes,4,rep,name=other_jurisdictions,json=otherJurisdictions,proto3" json:"other_jurisdictions,omitempty"`
	// Does the VASP have a programme that sets minimum AML, CFT, KYC/CDD and sanctions
	// standards per the requirements of the jurisdiction(s) regulatory regimes where
	// it is licensed/approved/registered?
	// Either yes or no
	HasRequiredRegulatoryProgram string `protobuf:"bytes,5,opt,name=has_required_regulatory_program,json=hasRequiredRegulatoryProgram,proto3" json:"has_required_regulatory_program,omitempty"`
	// Does the VASP conduct KYC/CDD before permitting its customers to send/receive
	// virtual asset transfers?
	ConductsCustomerKyc bool `protobuf:"varint,6,opt,name=conducts_customer_kyc,json=conductsCustomerKyc,proto3" json:"conducts_customer_kyc,omitempty"`
	// At what threshold does the VASP conduct KYC?
	KycThreshold         float32 `protobuf:"fixed32,7,opt,name=kyc_threshold,json=kycThreshold,proto3" json:"kyc_threshold,omitempty"`
	KycThresholdCurrency string  `protobuf:"bytes,8,opt,name=kyc_threshold_currency,json=kycThresholdCurrency,proto3" json:"kyc_threshold_currency,omitempty"`
	// Is the VASP required to comply with the application of the Travel Rule standards
	// in the jurisdiction(s) where it is licensed/approved/registered?
	MustComplyTravelRule bool `protobuf:"varint,9,opt,name=must_comply_travel_rule,json=mustComplyTravelRule,proto3" json:"must_comply_travel_rule,omitempty"`
	// Applicable Travel Regulations the VASP must comply with.
	ApplicableRegulations []string `protobuf:"bytes,10,rep,name=applicable_regulations,json=applicableRegulations,proto3" json:"applicable_regulations,omitempty"`
	// What is the minimum threshold for travel rule compliance?
	ComplianceThreshold         float32 `protobuf:"fixed32,11,opt,name=compliance_threshold,json=complianceThreshold,proto3" json:"compliance_threshold,omitempty"`
	ComplianceThresholdCurrency string  `protobuf:"bytes,12,opt,name=compliance_threshold_currency,json=complianceThresholdCurrency,proto3" json:"compliance_threshold_currency,omitempty"`
	// Is the VASP required by law to safeguard PII?
	MustSafeguardPii bool `protobuf:"varint,13,opt,name=must_safeguard_pii,json=mustSafeguardPii,proto3" json:"must_safeguard_pii,omitempty"`
	// Does the VASP secure and protect PII, including PII received from other VASPs
	// under the Travel Rule? (yes/no)
	SafeguardsPii bool `protobuf:"varint,14,opt,name=safeguards_pii,json=safeguardsPii,proto3" json:"safeguards_pii,omitempty"`
}

func (x *TRIXOQuestionnaire) Reset() {
	*x = TRIXOQuestionnaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRIXOQuestionnaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRIXOQuestionnaire) ProtoMessage() {}

func (x *TRIXOQuestionnaire) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRIXOQuestionnaire.ProtoReflect.Descriptor instead.
func (*TRIXOQuestionnaire) Descriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{3}
}

func (x *TRIXOQuestionnaire) GetPrimaryNationalJurisdiction() string {
	if x != nil {
		return x.PrimaryNationalJurisdiction
	}
	return ""
}

func (x *TRIXOQuestionnaire) GetPrimaryRegulator() string {
	if x != nil {
		return x.PrimaryRegulator
	}
	return ""
}

func (x *TRIXOQuestionnaire) GetFinancialTransfersPermitted() string {
	if x != nil {
		return x.FinancialTransfersPermitted
	}
	return ""
}

func (x *TRIXOQuestionnaire) GetOtherJurisdictions() []*Jurisdiction {
	if x != nil {
		return x.OtherJurisdictions
	}
	return nil
}

func (x *TRIXOQuestionnaire) GetHasRequiredRegulatoryProgram() string {
	if x != nil {
		return x.HasRequiredRegulatoryProgram
	}
	return ""
}

func (x *TRIXOQuestionnaire) GetConductsCustomerKyc() bool {
	if x != nil {
		return x.ConductsCustomerKyc
	}
	return false
}

func (x *TRIXOQuestionnaire) GetKycThreshold() float32 {
	if x != nil {
		return x.KycThreshold
	}
	return 0
}

func (x *TRIXOQuestionnaire) GetKycThresholdCurrency() string {
	if x != nil {
		return x.KycThresholdCurrency
	}
	return ""
}

func (x *TRIXOQuestionnaire) GetMustComplyTravelRule() bool {
	if x != nil {
		return x.MustComplyTravelRule
	}
	return false
}

func (x *TRIXOQuestionnaire) GetApplicableRegulations() []string {
	if x != nil {
		return x.ApplicableRegulations
	}
	return nil
}

func (x *TRIXOQuestionnaire) GetComplianceThreshold() float32 {
	if x != nil {
		return x.ComplianceThreshold
	}
	return 0
}

func (x *TRIXOQuestionnaire) GetComplianceThresholdCurrency() string {
	if x != nil {
		return x.ComplianceThresholdCurrency
	}
	return ""
}

func (x *TRIXOQuestionnaire) GetMustSafeguardPii() bool {
	if x != nil {
		return x.MustSafeguardPii
	}
	return false
}

func (x *TRIXOQuestionnaire) GetSafeguardsPii() bool {
	if x != nil {
		return x.SafeguardsPii
	}
	return false
}

type Jurisdiction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country       string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	RegulatorName string `protobuf:"bytes,2,opt,name=regulator_name,json=regulatorName,proto3" json:"regulator_name,omitempty"`
	LicenseNumber string `protobuf:"bytes,3,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
}

func (x *Jurisdiction) Reset() {
	*x = Jurisdiction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jurisdiction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jurisdiction) ProtoMessage() {}

func (x *Jurisdiction) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jurisdiction.ProtoReflect.Descriptor instead.
func (*Jurisdiction) Descriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{4}
}

func (x *Jurisdiction) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Jurisdiction) GetRegulatorName() string {
	if x != nil {
		return x.RegulatorName
	}
	return ""
}

func (x *Jurisdiction) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

// Implements a distributed version as a Lamport Scalar
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     uint64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`         // Process ID - used to deconflict ties in the version number.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"` // Montonically increasing version number.
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_trisa_gds_models_v1beta1_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP(), []int{5}
}

func (x *Version) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Version) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_trisa_gds_models_v1beta1_models_proto protoreflect.FileDescriptor

var file_trisa_gds_models_v1beta1_models_proto_rawDesc = []byte{
	0x0a, 0x25, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2f, 0x67, 0x64, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67,
	0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x1a, 0x15, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2f, 0x69, 0x76, 0x6d, 0x73, 0x31,
	0x30, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2f, 0x67, 0x64, 0x73, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x08, 0x0a, 0x04, 0x56, 0x41, 0x53, 0x50, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x58, 0x0a, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61,
	0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x13, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x69, 0x73, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x73, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x42, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x78, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x52, 0x49, 0x58, 0x4f, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x05, 0x74, 0x72,
	0x69, 0x78, 0x6f, 0x12, 0x5c, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x69, 0x73,
	0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67,
	0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x8c,
	0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67,
	0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xa5, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x76, 0x6d, 0x73,
	0x31, 0x30, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb2, 0x06, 0x0a, 0x12, 0x54, 0x52, 0x49, 0x58, 0x4f, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x1d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a,
	0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x12, 0x57, 0x0a, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2e, 0x67, 0x64, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x68, 0x61,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x68, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x79, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4b, 0x79, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x79, 0x63, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6b, 0x79,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6b, 0x79,
	0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6b, 0x79, 0x63, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x6d, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x61,
	0x66, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x50, 0x69, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x70, 0x69, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x61, 0x66,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x73, 0x50, 0x69, 0x69, 0x22, 0x76, 0x0a, 0x0c, 0x4a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x35, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x87, 0x01, 0x0a, 0x10, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x04, 0x2a, 0xbd, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x53, 0x53, 0x55, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45,
	0x41, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x09, 0x2a, 0x61, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x69, 0x73, 0x61, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2f, 0x74, 0x72, 0x69, 0x73, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x72, 0x69, 0x73, 0x61,
	0x2f, 0x67, 0x64, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_trisa_gds_models_v1beta1_models_proto_rawDescOnce sync.Once
	file_trisa_gds_models_v1beta1_models_proto_rawDescData = file_trisa_gds_models_v1beta1_models_proto_rawDesc
)

func file_trisa_gds_models_v1beta1_models_proto_rawDescGZIP() []byte {
	file_trisa_gds_models_v1beta1_models_proto_rawDescOnce.Do(func() {
		file_trisa_gds_models_v1beta1_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_trisa_gds_models_v1beta1_models_proto_rawDescData)
	})
	return file_trisa_gds_models_v1beta1_models_proto_rawDescData
}

var file_trisa_gds_models_v1beta1_models_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_trisa_gds_models_v1beta1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_trisa_gds_models_v1beta1_models_proto_goTypes = []interface{}{
	(BusinessCategory)(0),         // 0: trisa.gds.models.v1beta1.BusinessCategory
	(VerificationState)(0),        // 1: trisa.gds.models.v1beta1.VerificationState
	(ServiceState)(0),             // 2: trisa.gds.models.v1beta1.ServiceState
	(*VASP)(nil),                  // 3: trisa.gds.models.v1beta1.VASP
	(*Contacts)(nil),              // 4: trisa.gds.models.v1beta1.Contacts
	(*Contact)(nil),               // 5: trisa.gds.models.v1beta1.Contact
	(*TRIXOQuestionnaire)(nil),    // 6: trisa.gds.models.v1beta1.TRIXOQuestionnaire
	(*Jurisdiction)(nil),          // 7: trisa.gds.models.v1beta1.Jurisdiction
	(*Version)(nil),               // 8: trisa.gds.models.v1beta1.Version
	(*ivms101.LegalPerson)(nil),   // 9: ivms101.LegalPerson
	(*Certificate)(nil),           // 10: trisa.gds.models.v1beta1.Certificate
	(*anypb.Any)(nil),             // 11: google.protobuf.Any
	(*ivms101.NaturalPerson)(nil), // 12: ivms101.NaturalPerson
}
var file_trisa_gds_models_v1beta1_models_proto_depIdxs = []int32{
	9,  // 0: trisa.gds.models.v1beta1.VASP.entity:type_name -> ivms101.LegalPerson
	4,  // 1: trisa.gds.models.v1beta1.VASP.contacts:type_name -> trisa.gds.models.v1beta1.Contacts
	10, // 2: trisa.gds.models.v1beta1.VASP.identity_certificate:type_name -> trisa.gds.models.v1beta1.Certificate
	10, // 3: trisa.gds.models.v1beta1.VASP.signing_certificates:type_name -> trisa.gds.models.v1beta1.Certificate
	0,  // 4: trisa.gds.models.v1beta1.VASP.business_category:type_name -> trisa.gds.models.v1beta1.BusinessCategory
	6,  // 5: trisa.gds.models.v1beta1.VASP.trixo:type_name -> trisa.gds.models.v1beta1.TRIXOQuestionnaire
	1,  // 6: trisa.gds.models.v1beta1.VASP.verification_status:type_name -> trisa.gds.models.v1beta1.VerificationState
	2,  // 7: trisa.gds.models.v1beta1.VASP.service_status:type_name -> trisa.gds.models.v1beta1.ServiceState
	8,  // 8: trisa.gds.models.v1beta1.VASP.version:type_name -> trisa.gds.models.v1beta1.Version
	11, // 9: trisa.gds.models.v1beta1.VASP.extra:type_name -> google.protobuf.Any
	5,  // 10: trisa.gds.models.v1beta1.Contacts.technical:type_name -> trisa.gds.models.v1beta1.Contact
	5,  // 11: trisa.gds.models.v1beta1.Contacts.administrative:type_name -> trisa.gds.models.v1beta1.Contact
	5,  // 12: trisa.gds.models.v1beta1.Contacts.legal:type_name -> trisa.gds.models.v1beta1.Contact
	5,  // 13: trisa.gds.models.v1beta1.Contacts.billing:type_name -> trisa.gds.models.v1beta1.Contact
	12, // 14: trisa.gds.models.v1beta1.Contact.person:type_name -> ivms101.NaturalPerson
	11, // 15: trisa.gds.models.v1beta1.Contact.extra:type_name -> google.protobuf.Any
	7,  // 16: trisa.gds.models.v1beta1.TRIXOQuestionnaire.other_jurisdictions:type_name -> trisa.gds.models.v1beta1.Jurisdiction
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_trisa_gds_models_v1beta1_models_proto_init() }
func file_trisa_gds_models_v1beta1_models_proto_init() {
	if File_trisa_gds_models_v1beta1_models_proto != nil {
		return
	}
	file_trisa_gds_models_v1beta1_ca_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trisa_gds_models_v1beta1_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VASP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_gds_models_v1beta1_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_gds_models_v1beta1_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_gds_models_v1beta1_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRIXOQuestionnaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_gds_models_v1beta1_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jurisdiction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trisa_gds_models_v1beta1_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trisa_gds_models_v1beta1_models_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trisa_gds_models_v1beta1_models_proto_goTypes,
		DependencyIndexes: file_trisa_gds_models_v1beta1_models_proto_depIdxs,
		EnumInfos:         file_trisa_gds_models_v1beta1_models_proto_enumTypes,
		MessageInfos:      file_trisa_gds_models_v1beta1_models_proto_msgTypes,
	}.Build()
	File_trisa_gds_models_v1beta1_models_proto = out.File
	file_trisa_gds_models_v1beta1_models_proto_rawDesc = nil
	file_trisa_gds_models_v1beta1_models_proto_goTypes = nil
	file_trisa_gds_models_v1beta1_models_proto_depIdxs = nil
}
