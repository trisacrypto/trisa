// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: trisa/gds/api/v1beta1/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TRISADirectory_Lookup_FullMethodName        = "/trisa.gds.api.v1beta1.TRISADirectory/Lookup"
	TRISADirectory_Search_FullMethodName        = "/trisa.gds.api.v1beta1.TRISADirectory/Search"
	TRISADirectory_Register_FullMethodName      = "/trisa.gds.api.v1beta1.TRISADirectory/Register"
	TRISADirectory_VerifyContact_FullMethodName = "/trisa.gds.api.v1beta1.TRISADirectory/VerifyContact"
	TRISADirectory_Verification_FullMethodName  = "/trisa.gds.api.v1beta1.TRISADirectory/Verification"
	TRISADirectory_Status_FullMethodName        = "/trisa.gds.api.v1beta1.TRISADirectory/Status"
)

// TRISADirectoryClient is the client API for TRISADirectory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TRISADirectoryClient interface {
	// Interactions with the Directory Service during a TRISA transfer
	// These are the primary Directory Service interactions.
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	// Registration workflow and contact verification.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	VerifyContact(ctx context.Context, in *VerifyContactRequest, opts ...grpc.CallOption) (*VerifyContactReply, error)
	// Supplies the entity review and TRISA verification status of a VASP
	Verification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationReply, error)
	// Health check and status request that mirrors the TRISAHealth service
	Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServiceState, error)
}

type tRISADirectoryClient struct {
	cc grpc.ClientConnInterface
}

func NewTRISADirectoryClient(cc grpc.ClientConnInterface) TRISADirectoryClient {
	return &tRISADirectoryClient{cc}
}

func (c *tRISADirectoryClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupReply, error) {
	out := new(LookupReply)
	err := c.cc.Invoke(ctx, TRISADirectory_Lookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISADirectoryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, TRISADirectory_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISADirectoryClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, TRISADirectory_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISADirectoryClient) VerifyContact(ctx context.Context, in *VerifyContactRequest, opts ...grpc.CallOption) (*VerifyContactReply, error) {
	out := new(VerifyContactReply)
	err := c.cc.Invoke(ctx, TRISADirectory_VerifyContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISADirectoryClient) Verification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationReply, error) {
	out := new(VerificationReply)
	err := c.cc.Invoke(ctx, TRISADirectory_Verification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISADirectoryClient) Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServiceState, error) {
	out := new(ServiceState)
	err := c.cc.Invoke(ctx, TRISADirectory_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRISADirectoryServer is the server API for TRISADirectory service.
// All implementations must embed UnimplementedTRISADirectoryServer
// for forward compatibility
type TRISADirectoryServer interface {
	// Interactions with the Directory Service during a TRISA transfer
	// These are the primary Directory Service interactions.
	Lookup(context.Context, *LookupRequest) (*LookupReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	// Registration workflow and contact verification.
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	VerifyContact(context.Context, *VerifyContactRequest) (*VerifyContactReply, error)
	// Supplies the entity review and TRISA verification status of a VASP
	Verification(context.Context, *VerificationRequest) (*VerificationReply, error)
	// Health check and status request that mirrors the TRISAHealth service
	Status(context.Context, *HealthCheck) (*ServiceState, error)
	mustEmbedUnimplementedTRISADirectoryServer()
}

// UnimplementedTRISADirectoryServer must be embedded to have forward compatible implementations.
type UnimplementedTRISADirectoryServer struct {
}

func (UnimplementedTRISADirectoryServer) Lookup(context.Context, *LookupRequest) (*LookupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedTRISADirectoryServer) Search(context.Context, *SearchRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTRISADirectoryServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTRISADirectoryServer) VerifyContact(context.Context, *VerifyContactRequest) (*VerifyContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyContact not implemented")
}
func (UnimplementedTRISADirectoryServer) Verification(context.Context, *VerificationRequest) (*VerificationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verification not implemented")
}
func (UnimplementedTRISADirectoryServer) Status(context.Context, *HealthCheck) (*ServiceState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTRISADirectoryServer) mustEmbedUnimplementedTRISADirectoryServer() {}

// UnsafeTRISADirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TRISADirectoryServer will
// result in compilation errors.
type UnsafeTRISADirectoryServer interface {
	mustEmbedUnimplementedTRISADirectoryServer()
}

func RegisterTRISADirectoryServer(s grpc.ServiceRegistrar, srv TRISADirectoryServer) {
	s.RegisterService(&TRISADirectory_ServiceDesc, srv)
}

func _TRISADirectory_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISADirectoryServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISADirectory_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISADirectoryServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISADirectory_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISADirectoryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISADirectory_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISADirectoryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISADirectory_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISADirectoryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISADirectory_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISADirectoryServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISADirectory_VerifyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISADirectoryServer).VerifyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISADirectory_VerifyContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISADirectoryServer).VerifyContact(ctx, req.(*VerifyContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISADirectory_Verification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISADirectoryServer).Verification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISADirectory_Verification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISADirectoryServer).Verification(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISADirectory_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISADirectoryServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISADirectory_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISADirectoryServer).Status(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// TRISADirectory_ServiceDesc is the grpc.ServiceDesc for TRISADirectory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TRISADirectory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trisa.gds.api.v1beta1.TRISADirectory",
	HandlerType: (*TRISADirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _TRISADirectory_Lookup_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _TRISADirectory_Search_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TRISADirectory_Register_Handler,
		},
		{
			MethodName: "VerifyContact",
			Handler:    _TRISADirectory_VerifyContact_Handler,
		},
		{
			MethodName: "Verification",
			Handler:    _TRISADirectory_Verification_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TRISADirectory_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trisa/gds/api/v1beta1/api.proto",
}
