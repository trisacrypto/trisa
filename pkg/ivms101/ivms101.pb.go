// Specification Copyright (c) 2020 Joint Working Group on interVASP Messaging Standards
// https://intervasp.org/
// https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf

// Protocol Buffer Specification Copyright (c) 2020 CipherTrace, Inc. https://ciphertrace.com

// Licensed under MIT License

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// NOTE ON THE SPECIFICATION MAPPING
// This protocol buffers specification has applied the Protocol Buffers style guide
// https://developers.google.com/protocol-buffers/docs/style to the ISVM101
// specification to be consistent with other Protocol Buffers specifications and to
// avoid common pitfalls when generating language specific classes.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: ivms101/ivms101.proto

package ivms101

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Person:
	//
	//	*Person_NaturalPerson
	//	*Person_LegalPerson
	Person isPerson_Person `protobuf_oneof:"person"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{0}
}

func (m *Person) GetPerson() isPerson_Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (x *Person) GetNaturalPerson() *NaturalPerson {
	if x, ok := x.GetPerson().(*Person_NaturalPerson); ok {
		return x.NaturalPerson
	}
	return nil
}

func (x *Person) GetLegalPerson() *LegalPerson {
	if x, ok := x.GetPerson().(*Person_LegalPerson); ok {
		return x.LegalPerson
	}
	return nil
}

type isPerson_Person interface {
	isPerson_Person()
}

type Person_NaturalPerson struct {
	// Definition: a uniquely distinguishable individual; one single person.
	NaturalPerson *NaturalPerson `protobuf:"bytes,1,opt,name=natural_person,json=naturalPerson,proto3,oneof"`
}

type Person_LegalPerson struct {
	// Definition: any entity other than a natural person that can establish a
	// permanent customer relationship with an affected entity or otherwise own
	// property. This can include companies, bodies corporate, foundations, anstalt,
	// partnerships, or associations and other relevantly similar entities.
	LegalPerson *LegalPerson `protobuf:"bytes,2,opt,name=legal_person,json=legalPerson,proto3,oneof"`
}

func (*Person_NaturalPerson) isPerson_Person() {}

func (*Person_LegalPerson) isPerson_Person() {}

// Definition: refers to a uniquely distinguishable individual; one single person
type NaturalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: the distinct words used as identification for an individual.
	// Required
	Name *NaturalPersonName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Definition: the particulars of a location at which a person may be communicated with.
	// Zero or More
	GeographicAddresses []*Address `protobuf:"bytes,2,rep,name=geographic_addresses,json=geographicAddress,proto3" json:"geographic_addresses,omitempty"`
	// Definition: a distinct identifier used by governments of countries to uniquely
	// identify a natural or legal person.
	// Optional
	NationalIdentification *NationalIdentification `protobuf:"bytes,3,opt,name=national_identification,json=nationalIdentification,proto3" json:"national_identification,omitempty"`
	// Definition: a distinct identifier that uniquely identifies the person to the
	// institution in context.
	// Datatype: “Max50Text”
	// Optional
	CustomerIdentification string `protobuf:"bytes,4,opt,name=customer_identification,json=customerIdentification,proto3" json:"customer_identification,omitempty"`
	// Definition: date and place of birth of a person.
	// Optional
	DateAndPlaceOfBirth *DateAndPlaceOfBirth `protobuf:"bytes,5,opt,name=date_and_place_of_birth,json=dateAndPlaceOfBirth,proto3" json:"date_and_place_of_birth,omitempty"`
	// Definition: country in which a person resides (the place of a person's home).
	// The value used for the field country must be present on the ISO-3166-1 alpha-2
	// codes or the value XX.
	// Datatype: “CountryCode”
	// Optional
	CountryOfResidence string `protobuf:"bytes,6,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
}

func (x *NaturalPerson) Reset() {
	*x = NaturalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPerson) ProtoMessage() {}

func (x *NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPerson.ProtoReflect.Descriptor instead.
func (*NaturalPerson) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{1}
}

func (x *NaturalPerson) GetName() *NaturalPersonName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NaturalPerson) GetGeographicAddresses() []*Address {
	if x != nil {
		return x.GeographicAddresses
	}
	return nil
}

func (x *NaturalPerson) GetNationalIdentification() *NationalIdentification {
	if x != nil {
		return x.NationalIdentification
	}
	return nil
}

func (x *NaturalPerson) GetCustomerIdentification() string {
	if x != nil {
		return x.CustomerIdentification
	}
	return ""
}

func (x *NaturalPerson) GetDateAndPlaceOfBirth() *DateAndPlaceOfBirth {
	if x != nil {
		return x.DateAndPlaceOfBirth
	}
	return nil
}

func (x *NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

type NaturalPersonName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// At least one occurrence of naturalPersonNameID must have the value ‘LEGL’
	// specified in the element naturalPersonNameIdentifierType.
	// Definition: full name separated into primary and secondary identifier.
	// One or more
	NameIdentifiers []*NaturalPersonNameId `protobuf:"bytes,1,rep,name=name_identifiers,json=nameIdentifier,proto3" json:"name_identifiers,omitempty"`
	// Definition: full name separated into primary and secondary identifier using
	// local characters.
	// Zero or more
	LocalNameIdentifiers []*LocalNaturalPersonNameId `protobuf:"bytes,2,rep,name=local_name_identifiers,json=localNameIdentifier,proto3" json:"local_name_identifiers,omitempty"`
	// Definition: Alternate representation of a name that corresponds to the manner
	// the name is pronounced.
	// Zero or more
	PhoneticNameIdentifiers []*LocalNaturalPersonNameId `protobuf:"bytes,3,rep,name=phonetic_name_identifiers,json=phoneticNameIdentifier,proto3" json:"phonetic_name_identifiers,omitempty"`
}

func (x *NaturalPersonName) Reset() {
	*x = NaturalPersonName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPersonName) ProtoMessage() {}

func (x *NaturalPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPersonName.ProtoReflect.Descriptor instead.
func (*NaturalPersonName) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{2}
}

func (x *NaturalPersonName) GetNameIdentifiers() []*NaturalPersonNameId {
	if x != nil {
		return x.NameIdentifiers
	}
	return nil
}

func (x *NaturalPersonName) GetLocalNameIdentifiers() []*LocalNaturalPersonNameId {
	if x != nil {
		return x.LocalNameIdentifiers
	}
	return nil
}

func (x *NaturalPersonName) GetPhoneticNameIdentifiers() []*LocalNaturalPersonNameId {
	if x != nil {
		return x.PhoneticNameIdentifiers
	}
	return nil
}

type NaturalPersonNameId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: This may be the family name, the maiden name or the married name,
	// the main name, the surname, and in some cases, the entire name where the natural
	// person’s name cannot be divided into two parts, or where the sender is unable to
	// divide the natural person’s name into two parts.
	// Datatype: “Max100Text”
	// Required
	PrimaryIdentifier string `protobuf:"bytes,1,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// Definition: These may be the forenames, familiar names, given names, initials,
	// prefixes, suffixes or Roman numerals (where considered to be legally part of the
	// name) or any other secondary names.
	// Datatype: “Max100Text”
	// Optional
	SecondaryIdentifier string `protobuf:"bytes,2,opt,name=secondary_identifier,json=secondaryIdentifier,proto3" json:"secondary_identifier,omitempty"`
	// Definition: The nature of the name specified.
	// Required
	NameIdentifierType NaturalPersonNameTypeCode `protobuf:"varint,3,opt,name=name_identifier_type,json=nameIdentifierType,proto3,enum=ivms101.NaturalPersonNameTypeCode" json:"name_identifier_type,omitempty"`
}

func (x *NaturalPersonNameId) Reset() {
	*x = NaturalPersonNameId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPersonNameId) ProtoMessage() {}

func (x *NaturalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPersonNameId.ProtoReflect.Descriptor instead.
func (*NaturalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{3}
}

func (x *NaturalPersonNameId) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *NaturalPersonNameId) GetSecondaryIdentifier() string {
	if x != nil {
		return x.SecondaryIdentifier
	}
	return ""
}

func (x *NaturalPersonNameId) GetNameIdentifierType() NaturalPersonNameTypeCode {
	if x != nil {
		return x.NameIdentifierType
	}
	return NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_MISC
}

type LocalNaturalPersonNameId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: This may be the family name, the maiden name or the married name,
	// the main name, the surname, and in some cases, the entire name where the natural
	// person’s name cannot be divided into two parts, or where the sender is unable to
	// divide the natural person’s name into two parts.
	// Datatype: “LocalMax100Text”
	// Required
	PrimaryIdentifier string `protobuf:"bytes,1,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// Definition: These may be the forenames, familiar names, given names, initials,
	// prefixes, suffixes or Roman numerals (where considered to be legally part of
	// the name) or any other secondary names.
	// Datatype: “LocalMax100Text”
	// Optional
	SecondaryIdentifier string `protobuf:"bytes,2,opt,name=secondary_identifier,json=secondaryIdentifier,proto3" json:"secondary_identifier,omitempty"`
	// Definition: The nature of the name specified.
	// Required
	NameIdentifierType NaturalPersonNameTypeCode `protobuf:"varint,3,opt,name=name_identifier_type,json=nameIdentifierType,proto3,enum=ivms101.NaturalPersonNameTypeCode" json:"name_identifier_type,omitempty"`
}

func (x *LocalNaturalPersonNameId) Reset() {
	*x = LocalNaturalPersonNameId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalNaturalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalNaturalPersonNameId) ProtoMessage() {}

func (x *LocalNaturalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalNaturalPersonNameId.ProtoReflect.Descriptor instead.
func (*LocalNaturalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{4}
}

func (x *LocalNaturalPersonNameId) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *LocalNaturalPersonNameId) GetSecondaryIdentifier() string {
	if x != nil {
		return x.SecondaryIdentifier
	}
	return ""
}

func (x *LocalNaturalPersonNameId) GetNameIdentifierType() NaturalPersonNameTypeCode {
	if x != nil {
		return x.NameIdentifierType
	}
	return NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_MISC
}

// Constraint: ValidAddress
// There must be at least one occurrence of the element addressLine or (streetName and
// buildingName and/or buildingNumber).
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: Identifies the nature of the address.
	// Required
	AddressType AddressTypeCode `protobuf:"varint,1,opt,name=address_type,json=addressType,proto3,enum=ivms101.AddressTypeCode" json:"address_type,omitempty"`
	// Definition: Identification of a division of a large organisation or building.
	// Datatype: “Max50Text”
	// Optional
	Department string `protobuf:"bytes,2,opt,name=department,proto3" json:"department,omitempty"`
	// Definition: Identification of a sub-division of a large organisation or building.
	// Datatype: “Max70Text”
	// Optional
	SubDepartment string `protobuf:"bytes,3,opt,name=sub_department,json=subDepartment,proto3" json:"sub_department,omitempty"`
	// Definition: Name of a street or thoroughfare.
	// Datatype: “Max70Text”
	// Optional
	StreetName string `protobuf:"bytes,4,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	// Definition: Number that identifies the position of a building on a street.
	// Datatype: “Max16Text”
	// Optional
	BuildingNumber string `protobuf:"bytes,5,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	// Definition: Name of the building or house.
	// Datatype: “Max35Text”
	// Optional
	BuildingName string `protobuf:"bytes,6,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	// Definition: Floor or storey within a building.
	// Datatype: “Max70Text”
	// Optional
	Floor string `protobuf:"bytes,7,opt,name=floor,proto3" json:"floor,omitempty"`
	// Definition: Numbered box in a post office, assigned to a person or organisation,
	// where letters are kept until called for.
	// Datatype: “Max16Text”
	// Optional
	PostBox string `protobuf:"bytes,8,opt,name=post_box,json=postBox,proto3" json:"post_box,omitempty"`
	// Definition: Building room number.
	// Datatype: “Max70Text”
	// Optional
	Room string `protobuf:"bytes,9,opt,name=room,proto3" json:"room,omitempty"`
	// Definition: Identifier consisting of a group of letters and/or numbers that is
	// added to a postal address to assist the sorting of mail.
	// Datatype: “Max16Text”
	// Optional
	PostCode string `protobuf:"bytes,10,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	// Definition: Name of a built-up area, with defined boundaries and a local government.
	// Datatype: “Max35Text”
	// Optional
	TownName string `protobuf:"bytes,11,opt,name=town_name,json=townName,proto3" json:"town_name,omitempty"`
	// Definition: Specific location name within the town.
	// Datatype: “Max35Text”
	// Optional
	TownLocationName string `protobuf:"bytes,12,opt,name=town_location_name,json=townLocationName,proto3" json:"town_location_name,omitempty"`
	// Definition: Identifies a subdivision within a country subdivision.
	// Datatype: “Max35Text”
	// Optional
	DistrictName string `protobuf:"bytes,13,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`
	// Definition: Identifies a subdivision of a country for example, state, region,
	// province, départment or county.
	// Datatype: “Max35Text”
	// Optional
	CountrySubDivision string `protobuf:"bytes,14,opt,name=country_sub_division,json=countrySubDivision,proto3" json:"country_sub_division,omitempty"`
	// Definition: Information that locates and identifies a specific address, as
	// defined by postal services, presented in free format text.
	// Datatype: “Max70Text”
	// Zero to Seven
	AddressLine []string `protobuf:"bytes,15,rep,name=address_line,json=addressLine,proto3" json:"address_line,omitempty"`
	// Constraint: The value used for the field country must be present on the
	// ISO-3166-1 alpha-2 codes or the value XX.
	// Datatype: “CountryCode”
	// Required
	Country string `protobuf:"bytes,16,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{5}
}

func (x *Address) GetAddressType() AddressTypeCode {
	if x != nil {
		return x.AddressType
	}
	return AddressTypeCode_ADDRESS_TYPE_CODE_MISC
}

func (x *Address) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Address) GetSubDepartment() string {
	if x != nil {
		return x.SubDepartment
	}
	return ""
}

func (x *Address) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *Address) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *Address) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *Address) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *Address) GetPostBox() string {
	if x != nil {
		return x.PostBox
	}
	return ""
}

func (x *Address) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Address) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *Address) GetTownName() string {
	if x != nil {
		return x.TownName
	}
	return ""
}

func (x *Address) GetTownLocationName() string {
	if x != nil {
		return x.TownLocationName
	}
	return ""
}

func (x *Address) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *Address) GetCountrySubDivision() string {
	if x != nil {
		return x.CountrySubDivision
	}
	return ""
}

func (x *Address) GetAddressLine() []string {
	if x != nil {
		return x.AddressLine
	}
	return nil
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// Constraint: DateInPast
// If dateOfBirth is specified, the date specified must be a historic date (i.e. a date
// prior to the current date)
type DateAndPlaceOfBirth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: Date on which a person is born.
	// Definition: A point in time, represented as a day within the calendar year.
	// Compliant with ISO 8601.
	// Type: Text
	// Format: YYYY-MM-DD
	// Regex: ^([0-9]{4})-([0-9]{2})-([0-9]{2})$
	// Required
	DateOfBirth string `protobuf:"bytes,1,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// Definition: The town and/or the city and/or the suburb and/or the country
	// subdivision and/or the country where the person was born.
	// Datatype: “Max70Text”
	// Required
	PlaceOfBirth string `protobuf:"bytes,2,opt,name=place_of_birth,json=placeOfBirth,proto3" json:"place_of_birth,omitempty"`
}

func (x *DateAndPlaceOfBirth) Reset() {
	*x = DateAndPlaceOfBirth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateAndPlaceOfBirth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateAndPlaceOfBirth) ProtoMessage() {}

func (x *DateAndPlaceOfBirth) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateAndPlaceOfBirth.ProtoReflect.Descriptor instead.
func (*DateAndPlaceOfBirth) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{6}
}

func (x *DateAndPlaceOfBirth) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *DateAndPlaceOfBirth) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

// Constraint: ValidNationalIdentifierLegalPerson
// A legal person must have a value for nationalIdentifierType of either ‘RAID’ or
// ‘MISC’ or ‘LEIX’ or ‘TXID’.
// Constraint: CompleteNationalIdentifierLegalPerson
// A LegalPerson must not have a value for countryOfIssue and must have a value for the
// element RegistrationAuthority if the value for nationalIdentifierType is not ‘LEIX’
// Constraint: ValidLEI
// A LegalPerson with a nationalIdentifierType of ‘LEIX’ must have a value for the
// element nationalIdentifier that adheres to the convention as stated in datatype
// ‘LEIText’.
type NationalIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: An identifier issued by an appropriate issuing authority.
	// Constraint: ValidLEI
	// Datatype: “Max35Text”
	// Required
	NationalIdentifier string `protobuf:"bytes,1,opt,name=national_identifier,json=nationalIdentifier,proto3" json:"national_identifier,omitempty"`
	// Definition: Specifies the type of identifier specified.
	// Required
	NationalIdentifierType NationalIdentifierTypeCode `protobuf:"varint,2,opt,name=national_identifier_type,json=nationalIdentifierType,proto3,enum=ivms101.NationalIdentifierTypeCode" json:"national_identifier_type,omitempty"`
	// Definition: Country of the issuing authority.
	// Datatype: “CountryCode”
	// Optional
	CountryOfIssue string `protobuf:"bytes,3,opt,name=country_of_issue,json=countryOfIssue,proto3" json:"country_of_issue,omitempty"`
	// Definition: A code specifying the registration authority.
	// Constraint: The value used for the applicable element must be present on the
	// GLEIF Registration Authorities List.
	// Datatype: “RegistrationAuthority”
	// Optional
	RegistrationAuthority string `protobuf:"bytes,4,opt,name=registration_authority,json=registrationAuthority,proto3" json:"registration_authority,omitempty"`
}

func (x *NationalIdentification) Reset() {
	*x = NationalIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NationalIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalIdentification) ProtoMessage() {}

func (x *NationalIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalIdentification.ProtoReflect.Descriptor instead.
func (*NationalIdentification) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{7}
}

func (x *NationalIdentification) GetNationalIdentifier() string {
	if x != nil {
		return x.NationalIdentifier
	}
	return ""
}

func (x *NationalIdentification) GetNationalIdentifierType() NationalIdentifierTypeCode {
	if x != nil {
		return x.NationalIdentifierType
	}
	return NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_MISC
}

func (x *NationalIdentification) GetCountryOfIssue() string {
	if x != nil {
		return x.CountryOfIssue
	}
	return ""
}

func (x *NationalIdentification) GetRegistrationAuthority() string {
	if x != nil {
		return x.RegistrationAuthority
	}
	return ""
}

// Definition: refers to any entity other than a natural person that can establish a
// permanent customer relationship with an affected entity or otherwise own property.
// This can include companies, bodies corporate, foundations, anstalt, partnerships, or
// associations and other relevantly similar entities.
// Constraint: OriginatorInformationLegalPerson
// If the originator is a LegalPerson either geographicAddress (with an addressType
// value of ‘GEOG’) and/or nationalIdentification and/or customerNumber is required.
type LegalPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: The name of the legal person.
	// Constraint: LegalNamePresentLegalPerson
	// At least one occurrence of legalPersonNameIdentifier must have the value ‘LEGL’
	// specified in the element legalPersonNameIdentifierType.
	Name *LegalPersonName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Definition: The address of the legal person.
	// Zero or more
	GeographicAddresses []*Address `protobuf:"bytes,2,rep,name=geographic_addresses,json=geographicAddress,proto3" json:"geographic_addresses,omitempty"`
	// Definition: The unique identification number applied by the VASP to customer.
	// NOTE The specification has a descrepency in that 5.2.9.3.3 specifies an element
	// name as "customerNumber", while the table in 5.2.9.1 calls that element
	// "customerIdentification"
	// Datatype: “Max50Text”
	// Optional
	CustomerNumber string `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	// Definition: A distinct identifier used by governments of countries to uniquely
	// identify a natural or legal person.
	// Optional
	NationalIdentification *NationalIdentification `protobuf:"bytes,4,opt,name=national_identification,json=nationalIdentification,proto3" json:"national_identification,omitempty"`
	// Definition: The country in which the legal person is registered.
	// Constraint: The value used for the field country must be present on the
	// ISO-3166-1 alpha-2 codes or the value XX.
	// Datatype: “CountryCode”
	// Optional
	CountryOfRegistration string `protobuf:"bytes,5,opt,name=country_of_registration,json=countryOfRegistration,proto3" json:"country_of_registration,omitempty"`
}

func (x *LegalPerson) Reset() {
	*x = LegalPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPerson) ProtoMessage() {}

func (x *LegalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPerson.ProtoReflect.Descriptor instead.
func (*LegalPerson) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{8}
}

func (x *LegalPerson) GetName() *LegalPersonName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *LegalPerson) GetGeographicAddresses() []*Address {
	if x != nil {
		return x.GeographicAddresses
	}
	return nil
}

func (x *LegalPerson) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *LegalPerson) GetNationalIdentification() *NationalIdentification {
	if x != nil {
		return x.NationalIdentification
	}
	return nil
}

func (x *LegalPerson) GetCountryOfRegistration() string {
	if x != nil {
		return x.CountryOfRegistration
	}
	return ""
}

type LegalPersonName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: The name and type of name by which the legal person is known.
	// Constraint: LegalNamePresent
	// At least one occurrence of legalPersonNameIdentifier must have the value
	// ‘LEGL’ specified in the element legalPersonNameIdentifierType.
	// One or more
	NameIdentifiers []*LegalPersonNameId `protobuf:"bytes,1,rep,name=name_identifiers,json=nameIdentifier,proto3" json:"name_identifiers,omitempty"`
	// Definition: The name and type of name by which the legal person is known using
	// local characters.
	// Zero or more
	LocalNameIdentifiers []*LocalLegalPersonNameId `protobuf:"bytes,2,rep,name=local_name_identifiers,json=localNameIdentifier,proto3" json:"local_name_identifiers,omitempty"`
	// Definition: The name and type of name by which the legal person is known using
	// local characters.
	// Zero or more
	PhoneticNameIdentifiers []*LocalLegalPersonNameId `protobuf:"bytes,3,rep,name=phonetic_name_identifiers,json=phoneticNameIdentifier,proto3" json:"phonetic_name_identifiers,omitempty"`
}

func (x *LegalPersonName) Reset() {
	*x = LegalPersonName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPersonName) ProtoMessage() {}

func (x *LegalPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPersonName.ProtoReflect.Descriptor instead.
func (*LegalPersonName) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{9}
}

func (x *LegalPersonName) GetNameIdentifiers() []*LegalPersonNameId {
	if x != nil {
		return x.NameIdentifiers
	}
	return nil
}

func (x *LegalPersonName) GetLocalNameIdentifiers() []*LocalLegalPersonNameId {
	if x != nil {
		return x.LocalNameIdentifiers
	}
	return nil
}

func (x *LegalPersonName) GetPhoneticNameIdentifiers() []*LocalLegalPersonNameId {
	if x != nil {
		return x.PhoneticNameIdentifiers
	}
	return nil
}

type LegalPersonNameId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: Name by which the legal person is known.
	// Datatype: “Max100Text”
	// Required
	LegalPersonName string `protobuf:"bytes,1,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	// Definition: The nature of the name specified.
	// Required
	LegalPersonNameIdentifierType LegalPersonNameTypeCode `protobuf:"varint,2,opt,name=legal_person_name_identifier_type,json=legalPersonNameIdentifierType,proto3,enum=ivms101.LegalPersonNameTypeCode" json:"legal_person_name_identifier_type,omitempty"`
}

func (x *LegalPersonNameId) Reset() {
	*x = LegalPersonNameId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPersonNameId) ProtoMessage() {}

func (x *LegalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPersonNameId.ProtoReflect.Descriptor instead.
func (*LegalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{10}
}

func (x *LegalPersonNameId) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *LegalPersonNameId) GetLegalPersonNameIdentifierType() LegalPersonNameTypeCode {
	if x != nil {
		return x.LegalPersonNameIdentifierType
	}
	return LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_MISC
}

type LocalLegalPersonNameId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition: Name by which the legal person is known.
	// Datatype: "LocalMax100Text"
	// Required
	LegalPersonName string `protobuf:"bytes,1,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	// Definition: The nature of the name specified.
	// Required
	LegalPersonNameIdentifierType LegalPersonNameTypeCode `protobuf:"varint,2,opt,name=legal_person_name_identifier_type,json=legalPersonNameIdentifierType,proto3,enum=ivms101.LegalPersonNameTypeCode" json:"legal_person_name_identifier_type,omitempty"`
}

func (x *LocalLegalPersonNameId) Reset() {
	*x = LocalLegalPersonNameId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ivms101_ivms101_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalLegalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalLegalPersonNameId) ProtoMessage() {}

func (x *LocalLegalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_ivms101_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalLegalPersonNameId.ProtoReflect.Descriptor instead.
func (*LocalLegalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_ivms101_proto_rawDescGZIP(), []int{11}
}

func (x *LocalLegalPersonNameId) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *LocalLegalPersonNameId) GetLegalPersonNameIdentifierType() LegalPersonNameTypeCode {
	if x != nil {
		return x.LegalPersonNameIdentifierType
	}
	return LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_MISC
}

var File_ivms101_ivms101_proto protoreflect.FileDescriptor

var file_ivms101_ivms101_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2f, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31,
	0x1a, 0x12, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30,
	0x31, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x67, 0x65, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x76,
	0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x17, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x52, 0x13, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x11, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x56, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x19, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69,
	0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52,
	0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x54, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x04, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x6f, 0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x77, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x5f, 0x0a, 0x13,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x22, 0x89, 0x02,
	0x0a, 0x16, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x18, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x76,
	0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30,
	0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x67, 0x65, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x19, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31,
	0x30, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x21, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x1d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xb0, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x21, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x1d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x72, 0x69, 0x73, 0x61, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x69,
	0x73, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x76, 0x6d, 0x73, 0x31, 0x30, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ivms101_ivms101_proto_rawDescOnce sync.Once
	file_ivms101_ivms101_proto_rawDescData = file_ivms101_ivms101_proto_rawDesc
)

func file_ivms101_ivms101_proto_rawDescGZIP() []byte {
	file_ivms101_ivms101_proto_rawDescOnce.Do(func() {
		file_ivms101_ivms101_proto_rawDescData = protoimpl.X.CompressGZIP(file_ivms101_ivms101_proto_rawDescData)
	})
	return file_ivms101_ivms101_proto_rawDescData
}

var file_ivms101_ivms101_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ivms101_ivms101_proto_goTypes = []interface{}{
	(*Person)(nil),                   // 0: ivms101.Person
	(*NaturalPerson)(nil),            // 1: ivms101.NaturalPerson
	(*NaturalPersonName)(nil),        // 2: ivms101.NaturalPersonName
	(*NaturalPersonNameId)(nil),      // 3: ivms101.NaturalPersonNameId
	(*LocalNaturalPersonNameId)(nil), // 4: ivms101.LocalNaturalPersonNameId
	(*Address)(nil),                  // 5: ivms101.Address
	(*DateAndPlaceOfBirth)(nil),      // 6: ivms101.DateAndPlaceOfBirth
	(*NationalIdentification)(nil),   // 7: ivms101.NationalIdentification
	(*LegalPerson)(nil),              // 8: ivms101.LegalPerson
	(*LegalPersonName)(nil),          // 9: ivms101.LegalPersonName
	(*LegalPersonNameId)(nil),        // 10: ivms101.LegalPersonNameId
	(*LocalLegalPersonNameId)(nil),   // 11: ivms101.LocalLegalPersonNameId
	(NaturalPersonNameTypeCode)(0),   // 12: ivms101.NaturalPersonNameTypeCode
	(AddressTypeCode)(0),             // 13: ivms101.AddressTypeCode
	(NationalIdentifierTypeCode)(0),  // 14: ivms101.NationalIdentifierTypeCode
	(LegalPersonNameTypeCode)(0),     // 15: ivms101.LegalPersonNameTypeCode
}
var file_ivms101_ivms101_proto_depIdxs = []int32{
	1,  // 0: ivms101.Person.natural_person:type_name -> ivms101.NaturalPerson
	8,  // 1: ivms101.Person.legal_person:type_name -> ivms101.LegalPerson
	2,  // 2: ivms101.NaturalPerson.name:type_name -> ivms101.NaturalPersonName
	5,  // 3: ivms101.NaturalPerson.geographic_addresses:type_name -> ivms101.Address
	7,  // 4: ivms101.NaturalPerson.national_identification:type_name -> ivms101.NationalIdentification
	6,  // 5: ivms101.NaturalPerson.date_and_place_of_birth:type_name -> ivms101.DateAndPlaceOfBirth
	3,  // 6: ivms101.NaturalPersonName.name_identifiers:type_name -> ivms101.NaturalPersonNameId
	4,  // 7: ivms101.NaturalPersonName.local_name_identifiers:type_name -> ivms101.LocalNaturalPersonNameId
	4,  // 8: ivms101.NaturalPersonName.phonetic_name_identifiers:type_name -> ivms101.LocalNaturalPersonNameId
	12, // 9: ivms101.NaturalPersonNameId.name_identifier_type:type_name -> ivms101.NaturalPersonNameTypeCode
	12, // 10: ivms101.LocalNaturalPersonNameId.name_identifier_type:type_name -> ivms101.NaturalPersonNameTypeCode
	13, // 11: ivms101.Address.address_type:type_name -> ivms101.AddressTypeCode
	14, // 12: ivms101.NationalIdentification.national_identifier_type:type_name -> ivms101.NationalIdentifierTypeCode
	9,  // 13: ivms101.LegalPerson.name:type_name -> ivms101.LegalPersonName
	5,  // 14: ivms101.LegalPerson.geographic_addresses:type_name -> ivms101.Address
	7,  // 15: ivms101.LegalPerson.national_identification:type_name -> ivms101.NationalIdentification
	10, // 16: ivms101.LegalPersonName.name_identifiers:type_name -> ivms101.LegalPersonNameId
	11, // 17: ivms101.LegalPersonName.local_name_identifiers:type_name -> ivms101.LocalLegalPersonNameId
	11, // 18: ivms101.LegalPersonName.phonetic_name_identifiers:type_name -> ivms101.LocalLegalPersonNameId
	15, // 19: ivms101.LegalPersonNameId.legal_person_name_identifier_type:type_name -> ivms101.LegalPersonNameTypeCode
	15, // 20: ivms101.LocalLegalPersonNameId.legal_person_name_identifier_type:type_name -> ivms101.LegalPersonNameTypeCode
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ivms101_ivms101_proto_init() }
func file_ivms101_ivms101_proto_init() {
	if File_ivms101_ivms101_proto != nil {
		return
	}
	file_ivms101_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ivms101_ivms101_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalPersonName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalPersonNameId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalNaturalPersonNameId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateAndPlaceOfBirth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NationalIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalPersonName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalPersonNameId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ivms101_ivms101_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalLegalPersonNameId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ivms101_ivms101_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Person_NaturalPerson)(nil),
		(*Person_LegalPerson)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ivms101_ivms101_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ivms101_ivms101_proto_goTypes,
		DependencyIndexes: file_ivms101_ivms101_proto_depIdxs,
		MessageInfos:      file_ivms101_ivms101_proto_msgTypes,
	}.Build()
	File_ivms101_ivms101_proto = out.File
	file_ivms101_ivms101_proto_rawDesc = nil
	file_ivms101_ivms101_proto_goTypes = nil
	file_ivms101_ivms101_proto_depIdxs = nil
}
